# -*- coding: utf-8 -*-
"""Copy of KM-05: Functions, OOP, Time Complexity .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqzww1rUCMCP57TMrRztQzDcA3H2NgXD

# **Fungsi**
"""

## Deklarasi Fungsi
def cetak(x):
  print(x)

# Memanggil Fungsi
cetak("wokee")

# Deklarasi Fungsi dengan pengembalian
def tambah(a, b):
  return a + b;

# Memanggil Fungsi
print(tambah(2, 3))

def nama_fungsi(arg1, arg2, ...):
  # isi fungsi

def fungsi_dengan_pengembalian(arg1, arg2, ...):
  # isi fungsi
  return 'sesuatu'

"""# **Method**"""

class NamaClass:
  def nama_method(arg1, arg2, ...):
    # isi method

# Deklarasi Object (Class)
class Kucing(object):
  def meong(self):
    print("meeooong")

# Memanggil method
cat = Kucing()
cat.meong()

"""# **Lambda Expression**"""

# Lambda expression
tambah = lambda a, b: (a + b)
print(tambah(2, 3))

"""# **Object Oriented Programming**

## **Encapsulation**
"""

nama = "cemong"
usia = 1
warna = "putih coklat muda"
jenis = "anggora"

def meongg():
  print("meeeoonnggg... ")

def info_kucing(nama, usia, warna, jenis):
  print(f"nama: {nama}, usia: {usia}, warna: {warna}, jenis: {jenis}")

info_kucing(nama, usia, warna, jenis)


class Kucing:
  def __init__(self, nama, usia, warna, jenis):
    self.nama = nama
    self.usia = usia
    self.warna = warna
    self.jenis = jenis

  def myfunc(self):
    print("Hello my name is " + self.nama)
  
  def meong(self):
    print("meeeoonnggg... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, warna: {self.warna}, jenis: {self.jenis}")


kucing1 = Kucing("cemong", 1, "putih coklat muda", "anggora")

kucing1.info()

"""## **Abstraction**"""

# Memanggil method dari objek tanpa harus mengetahui cara kerja method
kucing1.myfunc()

"""## **Inheritence**"""

class Binatang(object):
  def __init__(self, nama, usia, jenis, mamalia):
    self.nama = nama
    self.usia = usia
    self.jenis = jenis
    self.mamalia = mamalia

  def tidur(self, durasi):
    for x in range(durasi):
      print("ddrrr... ddrrr... ")

  def info(self):
    print(f"nama: {self.nama}, usia: {self.usia}, jenis: {self.jenis}, mamalia: {self.mamalia}")


animal1 = Binatang("cemong", 1, "omnivora", True)

animal1.info()

class Kucing(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_kucing):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_kucing = jenis_kucing
  
  def meong(self):
    print("meeeonnggg")

  def info_kucing(self):
    print(f"warna: {self.warna}, jenis kucing: {self.jenis_kucing}")

cat1 = Kucing("cemong", 1, "omnivora", True, "putih coklat muda", "anggora")

cat1.info()
cat1.info_kucing()

"""## **Polymorphism**"""

class Ikan(Binatang):
  def __init__(self,  nama, usia, jenis, mamalia, warna, jenis_air, jenis_ikan):
    super().__init__(nama, usia, jenis, mamalia)
    self.warna = warna
    self.jenis_air = jenis_air
    self.jenis_ikan = jenis_ikan
  
  def berenang(self, durasi):
    print("wushh... wush... ")

  def info_ikan(self):
    print(f"warna: {self.warna}, jenis ikan: {self.jenis_ikan}, jenis air: {self.jenis_air}")

fish1 = Ikan("Jago", 2, "omnivora", False, "Merah Putih", "Tawar", "Cupang")

fish1.info()
fish1.info_ikan()
fish1.berenang(0)
fish1.tidur(5)

"""## **Activity OOP**

Buatlah 3 OOP beserta turunannya dari objek sekitar, buat ulang seperti yang diatas (encapsulation, abstaction, inheritance, polymorphism)

# **Time Complexity**
## Activity 

Hitung time complexity dengan bigO Notation pada algoritma berikut:

* Tidak perlu di run
"""

# 1

arr = [1, 2, 3, 4, 5]

print(arr[0])
print(arr[1])

# 2

print(arr[2])
for number in arr:
  print(number)
print(arr[1])
print(arr[2])

# 3

arr2 = [6, 7, 8, 9, 10]

for number in arr:
  print(number)
for number in arr2:
  print(number)
print(arr2[4])

# 4

print(arr2[1])
for number in arr:
  print(number)
for number in arr:
  print(number)

# 5

for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr[1]+arr2[1])
print(arr2[2])

# 6 

for number in arr:
  for number2 in arr:
    print(number+number2)
print(arr)

# 7 

for number in arr:
  for number2 in arr2:
    for number3 in arr:
      print(number+number2+number3)
print(arr[1])
print(arr2[2])
print(arr2[3])

# 8

for number in arr:
  print(number)
print(arr2)
for number in arr:
  for number2 in arr2:
    print(number+number2)
print(arr)

# 9 
# algoritma bubble sort
def a(x):
  for i in range(len(x)-1, 0, -1):
    for j in range(i):
      if x[j] >x [j+1]:
        temp = x[j]
        x[j] = x[j+1]
        x[j+1] = temp
        arr2 = []
        a(arr2)

print(arr2)

# 10

# algoritma linear search
def linear_search(list, arr):

    for index in range(1, len(list)):
      if (list[index] == arr):
        print("Nilai ditemukan")
        return index
      else:
        return "Nilai tidak ditemukan"

list = [1,2,3,4,5]

linear_search(list, 2)

# 11

# algoritma binary search
def binary_search(list, arr):
  left = 0 
  right = len(list)-1
  matched = False
  while(left <= right and not matched):

    mid = (left + right)//2
    if list[mid] == arr:
      matched = True
    else: 
      if arr < list[mid]:
        right = mid - 1
      else:
        left = mid + 1
  return matched

print(binary_search([1,2,3,4,5], 9))
print(binary_search([1,2,3,4,5], 1))

"""# **Fungsi**"""

# Deklarasi Fungsi
def cetak(y):
  print(y)

cetak("Oke Siap")

# Deklarasi Fungsi dengan pengembalian
def tambah(x, y):
  return x + y;

print(tambah(4, 5))

#
def nama_fungsi(arg1, arg2):

  def fungsi_dengan_pengembalian(arg1, arg2):
    return 'sesuatu'

"""# **OOP**

## **Encapsulation**
"""

merek = 'Lenovo'
tipe = 'Ideapad 310'
warna = 'Merah'
jumlah = 1

def mengetik():
  print("Ini adalah spesifikasi laptopku : ")

def info_laptop(merek, tipe, warna, jumlah):
  print(f"Merek : {merek}, Tipe : {tipe}, Warna : {warna}, Jumlah : {jumlah}" )

info_laptop(merek, tipe, warna, jumlah) 

class laptop:
  def __init__(self, merek, tipe, warna, jumlah):
    self.merek = merek
    self.tipe = tipe
    self.warna = warna
    self.jumlah = jumlah

  def mylaptop(self):
    print("Brand laptop yang paling saya suka adalah : " + self.Merek)

  def mengetik(self):
    print("Ini adalah spesifikasi laptopku : ")

  def info(self):
    print(f"Merek : {merek}, Tipe : {tipe}, Warna : {warna}, Jumlah : {jumlah}")

laptop1 = laptop('Lenovo', 'Idepada 310', 'Merah', 1)

laptop1.info()

"""## **Abstraction**"""

laptop1.mylaptop()

"""## **Inheritence**"""

class Benda(object):
  def __init__(self, merek, tipe, jumlah, kualitas):
    self.merek = merek
    self.tipe = tipe
    self.jumlah = jumlah
    self.kualitas = kualitas

  def update(self, software):
    for x in range(software):
      print("Penting untuk selalu perbaharui software")

  def info(self):
    print(f"Merek : {self.merek}, Tipe : {self.tipe}, Jumlah : {self.jumlah}, Kualitas : {self.kualitas}")

Barang = Benda("Lenovo", "Ideapad 310", 1, "Seken")

Barang.info()

class Laptop(Benda):
  def __init__(self, merek, tipe, jumlah, kualitas, warna):
    super().__init__(merek, tipe, jumlah, kualitas)
    self.warna = warna

  def mengetik():
    print("Ini adalah spesifikasi laptopku : ")

  def info_laptop(self):
    print(f"Warna : {self.warna}")

laptop2 = Laptop("Lenovo", "Ideapad 310", 1, "Seken", "Merah")

laptop2.info()
laptop2.info_laptop()

"""## **Polymorphism**"""

class Smartphone(Benda):
  def __init__(self, merek, tipe, jumlah, kualitas, warna, ram_rom, harga_baru):
    super().__init__(merek, tipe, jumlah, kualitas)
    self.warna = warna
    self.ram_rom = ram_rom
    self.harga_baru = harga_baru

  def test(self, kondisi):
    print("Barang masih mulus tanpa cacat")

  def info_smartphone(self):
    print(f"Warna : {self.warna}, Kapasitas penyimpanan : {self.ram_rom}, Harga : {self.harga_baru}")

android = Smartphone("Xiaomi", "Redmi Note 10", 1, "BNIB", "Hitam", "4/64 GB", "2 juta")

android.info()
android.info_smartphone()
android.test(0)
android.update(3)



"""# **Complexity**"""

# 9 
# algoritma bubble sort
def a(x):
  for i in range(len(x)-1, 0, -1):
    for j in range(i):
      if x[j] >x [j+1]:
        temp = x[j]
        x[j] = x[j+1]
        x[j+1] = temp
        arr2 = []
        a(arr2)

print(arr2)

# 10

# algoritma linear search
def linear_search(list, arr):

    for index in range(1, len(list)):
      if (list[index] == arr):
        print("Nilai ditemukan")
        return index
      else:
        return "Nilai tidak ditemukan"

list = [1,2,3,4,5]

linear_search(list, 2)

# 11

# algoritma binary search
def binary_search(list, arr):
  left = 0 
  right = len(list)-1
  matched = False
  while(left <= right and not matched):

    mid = (left + right)//2
    if list[mid] == arr:
      matched = True
    else: 
      if arr < list[mid]:
        right = mid - 1
      else:
        left = mid + 1
  return matched

print(binary_search([1,2,3,4,5], 9))
print(binary_search([1,2,3,4,5], 1))